import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

TOKEN = "8369455981:AAGBJJYaKr0rJD24B9YVKip0Bunp2a7hXYE"
bot = telebot.TeleBot(TOKEN)

PRICE_PER_GRAM_USD = 20

products = {
    "–ú–ï–§ –ö–†–ò–°–¢–ê–õ–õ": PRICE_PER_GRAM_USD,
    "–ë–û–®–ö–ò": PRICE_PER_GRAM_USD,
    "–ê–ú–§–ï–¢–ê–ú–ò–ù": PRICE_PER_GRAM_USD,
    "–≠–ö–°–¢–ê–ó–ò": PRICE_PER_GRAM_USD,
    "–ì–ê–®–ò–®": PRICE_PER_GRAM_USD,
    "–ö–û–ö–ê–ò–ù": PRICE_PER_GRAM_USD,
}

allowed_cities = [
    "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
    "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
    "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂", "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–ö–∏–µ–≤", "–•–∞—Ä—å–∫–æ–≤", "–û–¥–µ—Å—Å–∞", "–î–Ω–µ–ø—Ä", "–ó–∞–ø–æ—Ä–æ–∂—å–µ", "–õ—å–≤–æ–≤", "–ö—Ä–∏–≤–æ–π –†–æ–≥",
    "–ù–∏–∫–æ–ª–∞–µ–≤", "–ú–∞—Ä–∏—É–ø–æ–ª—å", "–õ—É–≥–∞–Ω—Å–∫",
    "–ê–ª–º–∞—Ç—ã", "–ù—É—Ä-–°—É–ª—Ç–∞–Ω", "–®—ã–º–∫–µ–Ω—Ç", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "–ê–∫—Ç–æ–±–µ", "–¢–∞—Ä–∞–∑",
    "–ü–∞–≤–ª–æ–¥–∞—Ä", "–£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫", "–°–µ–º–µ–π", "–ö–æ—Å—Ç–∞–Ω–∞–π",
]

user_data = {}

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}
    send_city_request(chat_id)

def send_city_request(chat_id):
    markup = InlineKeyboardMarkup(row_width=3)
    for city in allowed_cities[:15]:
        markup.add(InlineKeyboardButton(city, callback_data=f"city_{city}"))
    markup.add(InlineKeyboardButton("–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="other_city"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("city_") or call.data == "other_city")
def city_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}

    if call.data == "other_city":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:")
        bot.answer_callback_query(call.id)
        user_data[chat_id]["awaiting_city_input"] = True
    else:
        city = call.data[5:]
        if city in allowed_cities:
            user_data[chat_id]["city"] = city
            user_data[chat_id].pop("awaiting_city_input", None)
            bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: *{city}*", chat_id=chat_id, message_id=call.message.message_id, parse_mode="Markdown")
            show_product_menu(chat_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "–ì–æ—Ä–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get("awaiting_city_input", False))
def manual_city_input(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}

    city = message.text.strip()
    if city in allowed_cities:
        user_data[chat_id]["city"] = city
        user_data[chat_id].pop("awaiting_city_input", None)
        bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: *{city}*", parse_mode="Markdown")
        show_product_menu(chat_id)
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ.")

def show_product_menu(chat_id):
    markup = InlineKeyboardMarkup(row_width=2)
    for product in products.keys():
        markup.add(InlineKeyboardButton(product, callback_data=f"product_{product}"))
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_city"))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("product_") or call.data == "back_to_city")
def product_callback(call):
    chat_id = call.message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}

    if call.data == "back_to_city":
        user_data[chat_id].pop("city", None)
        user_data[chat_id].pop("product", None)
        send_city_request(chat_id)
        bot.answer_callback_query(call.id)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", chat_id=chat_id, message_id=call.message.message_id)
    else:
        product = call.data[8:]
        user_data[chat_id]["product"] = product
        bot.answer_callback_query(call.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        BASE_DIR = os.path.dirname(os.path.abspath(__file__))
        photo_path = os.path.join(BASE_DIR, f"{product}.jpg")  # –∏—â–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –∏–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Ç–æ—á–Ω–æ —Å product

        if os.path.exists(photo_path):
            with open(photo_path, "rb") as photo:
                bot.send_photo(chat_id, photo, caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{product}*.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", parse_mode="Markdown")
        else:
            bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ *{product}*.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text.isdigit() and "product" in user_data.get(m.chat.id, {}))
def quantity_selected(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {}

    grams = int(message.text)
    product = user_data[chat_id]["product"]
    price_usd = grams * products[product]
    price_rub = round(price_usd * 93, 2)
    price_kzt = round(price_usd * 470, 2)

    text = send_order_message(chat_id, product, grams, price_usd, price_rub, price_kzt)

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/operatortgbot"))
    bot.send_message(chat_id, text, parse_mode="Markdown", reply_markup=markup)

def send_order_message(chat_id, product, grams, price_usd, price_rub, price_kzt):
    city = user_data.get(chat_id, {}).get("city", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    return f"""üßæ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*
üì¶ –¢–æ–≤–∞—Ä: *{product}*
üèô –ì–æ—Ä–æ–¥: *{city}*
‚öñ –ö–æ–ª-–≤–æ: *{grams} –≥*
üíµ –ö –æ–ø–ª–∞—Ç–µ: *{price_usd}$* / *{price_rub}‚ÇΩ* / *{price_kzt}‚Ç∏*

üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—à–µ–ª–µ–∫:
`TYF1hRDfrwXtW5qXcoffWxYbxecwaLjTph`
(USDT / TRC20)

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º."""

bot.polling()
